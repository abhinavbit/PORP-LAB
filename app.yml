---
- hosts: all
  become: True

  tasks:
     - name: Include vars
       include_vars: 
          file: 'vars/main.yml'

     - name: Download Percona Repo
       get_url: 
          url: "{{ percona_repo_url }}"
          dest: "{{ percona_repo_dest }}"

     - name: Install Percona Repo
       apt:
          deb: "{{ percona_repo_dest }}"

     - name: update apt chache
       apt:   
          update_cache: yes

     - name: Add hosts inside /etc/hosts
       lineinfile: 
         path: /etc/hosts
         state: present
         line: "{{ item }}"
       with_items:
         - "{{ mysql_server_1_ip }}  {{ mysql_server_1_hostname }} {{ mysql_server_1_hostname }}" 
         - "{{ mysql_server_2_ip }}  {{ mysql_server_2_hostname }} {{ mysql_server_2_hostname }}"
         - "{{ mysql_server_3_ip }}  {{ mysql_server_3_hostname }} {{ mysql_server_3_hostname }}" 

     - name: Install Percona Server
       apt:
         name: "{{ item }}" 
         state: present
         force: yes 
       vars:
         item:
            - "{{ percona_server_common }}"
            - "{{ percona_server_client }}"
            - "{{ percona_server_server }}"
       environment:
          DEBIAN_FRONTEND: noninteractive

     - name: start mysql
       service:
             name: mysql
             state: restarted
             enabled: yes

     - name: Install Percona Toolkit
       apt:
         name: percona-toolkit
         state: present
         force: yes

     - name: Install ProxySQL 
       apt: 
         name: proxysql
         state: present
         force: yes

     - name: start proxysql
       service:
             name: proxysql
             state: restarted
             enabled: yes

     - name: configure proxysql 
       copy: 
         src: init/proxysql_init.sql 
         dest: /tmp/proxysql_init.sql

     - shell: mysql -u admin -padmin -h 127.0.0.1 -P6032 < /tmp/proxysql_init.sql
       ignore_errors: yes

     - name: Install Orchestrator Dependency 
       apt: 
         name: ['jq', 'python2.7-mysqldb']
         state: present 
         force: yes 

     - name: Download Orchestrator Packages 
       get_url:
          url: "{{ item.url }}"
          dest: "{{ item.dest }}"
       with_items: 
          - { url: "{{ orchestrator_url }}", dest: "{{ orchestrator_dest }}" }
          - { url: "{{ orchestrator_client_url }}", dest: "{{ orchestrator_client_dest }}" }
          - { url: "{{ orchestrator_cli_url }}", dest: "{{ orchestrator_cli_dest }}" } 

     - name: Install Orchestrator Packages 
       apt:
          deb: "{{ item }}" 
       with_items: 
          - "{{ orchestrator_dest }}"
          - "{{ orchestrator_client_dest }}"
          - "{{ orchestrator_cli_dest }}"
         
     - name: Create orchestrator database
       mysql_db:
          name: orchestrator
          state: present

     - name: Create MySQLOrchestratorUser
       mysql_user:
         name: orchestrator
         password: 0rcP@sss
         host: '%'
         priv: "*.*:ALL PRIVILEGES"
         state: present

     - name: Orchestrator configuration 
       template: 
         src: orchestrator.conf.json.j2
         dest: /usr/local/orchestrator/orchestrator.conf.json

     - name: start orchestrator
       service:
             name: orchestrator
             state: restarted
             enabled: yes

     - name: Install PMM Client
       apt:
         name: pmm-client
         state: present
         force: yes

     - name: Download Docker GPG Key
       get_url:
          url: 'https://download.docker.com/linux/ubuntu/gpg'
          dest: '/tmp/docker-gpg.key'

     - name: Add Docker GPG Key 
       apt_key:
          file: '/tmp/docker-gpg.key'
          state: present 

     - name: Add Docker repository 
       apt_repository:
          repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable'
          state: present 

     - name: update apt chache
       apt:
          update_cache: yes

     - name: Install Docker
       apt:
         name: docker-ce
         state: present
         force: yes

     - name: start docker
       service:
             name: docker
             state: restarted
             enabled: yes

     - name: pip install docker-py
       pip:
         name: docker-py
         state: present

     - name: pull pmm server docker image
       docker_image:
         name: percona/pmm-server:latest
         pull: yes
         state: present 
         debug: true

     - name: Create a pmm-data container
       docker_container:
         name: pmm-data
         image: percona/pmm-server:latest
         state: present 
         volumes:
           - /opt/prometheus/data
           - /opt/consul-data
           - /var/lib/pmm-mysql-data
           - /var/lib/grafana
         command: /bin/true

     - name: Running PMM Data Container without Security ( unprotected )
       docker_container:
         name: pmm-server
         image: percona/pmm-server:latest
         state: started
         volumes_from:
           - pmm-data
         ports:
           - "80:80"
         env: 
           SECRET_KEY: "ssssh"
           BOOLEAN_KEY: "yes"

     - name: configure pmm-client
       copy:
         src: init/pmm_init.sh
         dest: /tmp/pmm_init.sh
         mode: 0744

     - shell: /tmp/pmm_init.sh
       ignore_errors: yes
 


